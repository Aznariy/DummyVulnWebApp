Clear-Host

$cx_apiKey = Read-Host -Prompt "Please Enter Your Checkmarx API Key"

# Configuration
$cx_domain = "https://us.ast.checkmarx.net"
$cx_access_token_url = "https://us.iam.checkmarx.net/auth/realms/zayo/protocol/openid-connect/token"

# Prepare body for Checkmarx token retrieval
$cx_body = @{
    grant_type    = "refresh_token"
    client_id     = "ast-app"
    refresh_token = $cx_apiKey
}

# Retrieve Access Token from Checkmarx
$GetCXAccessToken = Invoke-RestMethod -Uri $cx_access_token_url -Method Post -Body $cx_body -ContentType "application/x-www-form-urlencoded"
$cx_header = @{ Authorization = "Bearer " + $GetCXAccessToken.access_token }

$cx_scansbody = @{
    limit      = 10000
    offset     = 0
    searchID   = ""
    scanStatus = ""
    sortBy     = ""
} | ConvertTo-Json

# Get project details
$GetAllScans = Invoke-RestMethod -Uri "$cx_domain/api/scans/byFilters" -Method POST -Headers $cx_header -Body $cx_scansbody -ContentType "application/json"

$cutoffDate = (Get-Date).ToUniversalTime().AddDays(-30)

$oldScans = $GetAllScans.scans | Where-Object {
    ([datetime]::Parse($_.createdAt) -lt $cutoffDate) -and
    ($_.branch -notin @('master', 'main', 'Main')) -and ($_.initiator -notlike "cxservice*")
}

$oldScans | ForEach-Object {

    $scanID = $_.id
    $projectName = $_.projectName
    $branchName = $_.branch

    try {
        Invoke-RestMethod -Uri "$cx_domain/api/scans/$scanID" -Method DELETE -Headers $cx_header -ContentType "application/json"
    }
    catch {
        Write-Host "Unable to delete the scan for project $projectName and branch $branchName"
    }
}
